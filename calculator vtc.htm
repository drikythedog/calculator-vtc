<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculateur de tarifs VTC</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #map { height: 300px; margin-top: 20px; }
        #directions { margin-top: 20px; padding: 10px; background: #f4f4f4; border: 1px solid #ddd; }
        .price { font-weight: bold; color: green; }
        label { display: block; margin-top: 10px; }
        select, input, button { width: 100%; padding: 10px; margin-top: 5px; }
        button { background: #007BFF; color: white; border: none; cursor: pointer; }
        button:hover { background: #0056b3; }
    </style>
</head>
<body>
    <h1>Calculateur de tarifs VTC</h1>
    <div>
        <label for="start">Point de départ :</label>
        <input type="text" id="start" placeholder="Adresse de départ">
        <label for="end">Destination :</label>
        <input type="text" id="end" placeholder="Adresse de destination">
        <label for="vehicle">Type de véhicule :</label>
        <select id="vehicle">
            <option value="berline">Berline (2,50 €/km)</option>
            <option value="suv">SUV (3,00 €/km)</option>
            <option value="van">Van (3,50 €/km)</option>
        </select>
        <button onclick="calculateRoute()">Calculer le tarif</button>
    </div>
    <div id="map"></div>
    <div id="directions"></div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // Initialisation de la carte
        const map = L.map('map').setView([48.8566, 2.3522], 13); // Centre sur Paris
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Service de calcul d'itinéraire (OSRM)
        async function calculateRoute() {
            const start = document.getElementById('start').value;
            const end = document.getElementById('end').value;
            const vehicle = document.getElementById('vehicle').value;

            if (!start || !end) {
                alert('Veuillez entrer une adresse de départ et une destination.');
                return;
            }

            // Géocodage des adresses (transformation en coordonnées)
            const startCoords = await geocode(start);
            const endCoords = await geocode(end);

            if (!startCoords || !endCoords) {
                alert('Impossible de trouver les adresses. Vérifiez les saisies.');
                return;
            }

            // Calcul de l'itinéraire avec OSRM
            const response = await fetch(
                `https://router.project-osrm.org/route/v1/driving/${startCoords.lng},${startCoords.lat};${endCoords.lng},${endCoords.lat}?overview=full&geometries=geojson`
            );
            const data = await response.json();

            if (data.routes && data.routes.length > 0) {
                const route = data.routes[0];
                const distanceKm = (route.distance / 1000).toFixed(2);
                const durationMin = (route.duration / 60).toFixed(2);

                // Calcul du prix en fonction du type de véhicule
                const price = calculatePrice(distanceKm, vehicle);

                // Affichage des résultats
                document.getElementById('directions').innerHTML = `
                    <h3>Résultats</h3>
                    <p>Distance : ${distanceKm} km</p>
                    <p>Durée estimée : ${durationMin} minutes</p>
                    <p>Prix estimé : <span class="price">${price} €</span></p>
                `;

                // Affichage de l'itinéraire sur la carte
                const routeCoordinates = route.geometry.coordinates;
                const geojson = {
                    type: 'Feature',
                    properties: {},
                    geometry: {
                        type: 'LineString',
                        coordinates: routeCoordinates
                    }
                };

                if (window.routeLayer) {
                    map.removeLayer(window.routeLayer);
                }
                window.routeLayer = L.geoJSON(geojson, {
                    style: { color: 'blue', weight: 4 }
                }).addTo(map);

                // Ajuster la carte pour afficher l'itinéraire
                const bounds = L.latLngBounds(routeCoordinates.map(coord => [coord[1], coord[0]]));
                map.fitBounds(bounds);
            } else {
                alert('Impossible de calculer l\'itinéraire. Vérifiez les adresses.');
            }
        }

        // Géocodage des adresses avec Nominatim (OpenStreetMap)
        async function geocode(address) {
            const response = await fetch(
                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`
            );
            const data = await response.json();
            if (data.length > 0) {
                return { lat: parseFloat(data[0].lat), lng: parseFloat(data[0].lon) };
            }
            return null;
        }

        // Fonction de calcul du prix
        function calculatePrice(distanceKm, vehicle) {
            const rates = {
                berline: 2.5,
                suv: 3.0,
                van: 3.5
            };
            const ratePerKm = rates[vehicle] || 2.5; // Tarif par défaut si le véhicule n'est pas reconnu
            const totalPrice = (distanceKm * ratePerKm).toFixed(2); // Arrondi à 2 décimales
            return totalPrice;
        }
    </script>
</body>
</html>
